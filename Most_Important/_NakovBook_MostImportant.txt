Глава 1 Въведение в програмирането


Управление на pc - 
- Наи-ниско ниво процесор и регистрите на pc
- Операционна система, периферни устройства, протоколи
- Най-високото ниво в софтуера са приложенията.


Програмиране - управление на pc с помощта на команди.
Езици ориентирани към машинно ниво - асемблер
Езици ориентирани към системно ниво - C 
Езици от високо ниво, ориентирани към писането на програми:
Java, C++, C#, Visual Basic, Ruby, PHP и др.


Java e обектно-ориентиран език за програмиране от високо ниво с общо предназначение. Първа версия от Sun Microsystems през 1995г. Програмата представлява един или няколко файла с .java разширение. Тези файлове се компилират от компилатора на java - javac до изпълним код и се записват във файлове със същото име но различно разширение .class . Клас файловете съдържат Java Bytecode инструкции изпълними от JVM(виртуалната машина).


Етапи при разработката на софтуер:
1. Събиране на изискванията за продукта и изготвяне на дизайн
2. Планиране и изготвяне на архитектура и дизайн
3. Реализация
4. Изпитания на продукта (тестове)
5. Внедряване и експлоатация
6. Поддръжка


Как работи Java програма
1. Дефиниране на class - class + името на класа с главна буква
2. Дефиниция на метод main() - public static void main(String[] arguments) { }
3. Съдържание на метод main() - в {}, можем да сложим произволна последователност от изрази и те ще бъдат изпълнение в редът им на задаване.


Java различава малки от големи букви


Програмният код трябва да е правилно форматиран, в противен случай рязко се намалява четимостта и трудно се модифицира.Правила за форматиране:
-методите се отместват по-навътре от дефиницията на класа
-съдържанието на методите се отмества по навътре от дефиницията на метода
- { трябва да е на същия ред, на който е дефиниран класа или метода
- } трябва да е сама на ред, отместена на същото разстояние като началото на реда на отварящата скоба
-имената на класовете трябва да започват с главна буква
-имената на променливите и методите трябва да започват с малка буква



Независимост от средата - основно предимство и причина, поради която се е наложил езикът. Кодът веднъж компилиран може да работи на произволни, поддържани от платформата опер. система или хардуерно устройство.


Bytecode - междинен език(записва се във файловете .class ). Той не се пуска за директно изпълнение от процесора, а се изпълнява от негов аналог - виртуален процесор - Java Virtual Machine (JVM)


JVM основният компонент осигуряващ независимостта от хардуер и ОС.
JVM е абстрактна изчислителна машина. Има набор от инструкции и манипулира области от паметта по време на изпълнение на програмата.


Java предлага автоматично управление на паметта. За това се грижи спец. компонент от JVM наречен "събирач на боклук"(Garbage Collector), който следи кога заделената памет за променливи и обекти не се ползва и я освобождава.


Java платформата, освен езика Java, съдържа в себе си Java виртуалната машина и множество помощни инструменти и библиотеки. Нейни разновидности са:
1. Java Platform Standard Edition (Java SE) - стандартна версия предназначена за разработка и използването на настолни приложения
2. Java Platform Enterprice Edition (Java EE) - големи приложения с корпоративен характер, предназначени да се ползват от хиляди клиенти.
3. Java Platofrm Micro Edition (Java ME) - ограничена версия с по-малко възможности, предназначена за малки и ограничени от към ресурс устроийства


Java технологиите 
Разширенията са програми, достъпни за преизползване от други Java програми. Те се използват като инструменти, защото са сравнително прости. Съществуват и разшитения, които имат сложна структура и вътрешни зависимости, тях е по-коректно да наречем технологии.


Application Programming Interface (API)
Всеки Java инструмент или технология се използва, като се създаде обект и се извикат техни методи. Наборът от публични класове и методи, които са достъпни за употреба от програмистите и се предоставят от технологиите, се нарича 
Application Programming Interface или просто API.


Какво ви трябва, за да програмирате на Java? 
- инсталирана Java платформа и текстов редактор.
 

Дистрибуции на Java SE - JDK/SDK и JRE 
- Java Development Kit(JDK)/Java Standard Development Kit(SDK) включва: виртуална машина, Java компилатор и множество помощни инструменти.
- Java Runtime Environment (JRE) - включва само виртуална машина и някои от нейните инструменти, орязана версия на JDK/SDK. Използва се от хора, които искат само да изпълняват готови програми, а не да пишат.


Интегрирани среди за разработка-(Integrated Development Environment, IDE)





Глава 2 Примитивни типове данни и променливи


Типове данни - съвкупност от стойности, които имат еднакви характеристики.
Типовете данни се характеризират с :
- Име 
- Размер (колко памет заемат)
- Стойност по подразбиране (default value)

Видове типове данни:

- Целочислени типове - byte(-128/127/8bit), short(-32768/32767/16bit), int(-2 147 483 648/2147483647/32), long(-9223372036854775808/9223372036854775807/0L)

- Реални типове с плаваща запетая-float(0.0f/32bit/точност от 6 до 9 знака) и double(0.0d/64bit/точност от 15 до 17 знака) 

- Булев тип - boolean (true/false, дефолт е false)

- Символен тип - char(0 до 65535, дефолт е'\u0000', представлява символна информация, на която отговаря число)

- Обектен тип - Object (Специален тип, явява се родител на всички други типове, може да приема стойности на всеки друг тип)

- Символни низове - String (поредица от символи/могат да се конкатенират, разделят и други. Ограждат се с кавички)


Примитивни типове - byte,short,int,long,char,boolean - вградени в езика Java на най-ниско ниво.
Сложни типове - Object и String(изписват се с главни букви),класове дефинирани чрез средствата на езика Java, а не са част от самият него, част са от страндартните библиотеки на Java.


Когато можем да използваме byte вместо int/long е по-добре, защото това ще спести от заеманата в компютъра памет.


Не всички реални числа имат точно преставяне в типове float/double. Числото 0.1 се представя закръглено в float като 0.099999994.


Променливата е контейнер за информация, който може да променя стойността си. Осигурява възможност за:
- Запазване на информация
- Извличане на запазената там информация
- Модифициране на запазената там информация


Характеристики на променливата:
- Име
- Тип (на запазената в тях информация)
- Стойност (запазената информация)


Имена на променливи - ПРАВИЛА
- буквите от a-z, A-Z, 0-9, $ и _ . По принцип е допустимо да се използва и букви от кирилицата, но е препоръчително да се избягват
- имената на променливите не може да започват с цифри
- имената на промонливите не могат да съвпадат със служебни думи(keyword)


Имена на променливи - препоръки
- имената трябва да са описателни - да обясняват добре за какво служат
- трябва да се използват само латински букви
- трябва да започват с малка буква, а следващата с главна ( firstName )
- името трябва да не е нито дълго нито много късо
- трябва да се внимава с главните букви, тъй като java прави разлика


Деклариране на променливи:
- Задаваме нейния тип
- задаваме нейното име
- Може да зададем начална стойност, но не е задължително


Стойностни и референтни типове 
- Стойностни типове (value types) - съхраняват се в стека за изпълнение на програмата и съдържат директно стойността си. Това биват примитивните числови типове - byte,short,int,long,float,double,char,boolean. Те заемат 1,2,4 или 8 байта в стека, които се освобождават при излизането им от обхват.
- Референтни типове (reference types) - съхраняват се в стека за изпълнение на програмата с референция(указател сочещ реалното местоположение на стойността в динамичната памет/референцията има тип и може да има като стойност само обекти от своя тип - тя е типизиран указател) към динамичната памет(heap), където се съхранява реалната им стойност. Референтните типове заделят динамична памет(heap) при създаването си и се освобождават по някое време от системата за почистване на паметта(garbage collector), когато тя установи, че вече не се използва от програмата. Тъй като заделянето и освобождаването на памет е бавна операция, може да се каже, че референтните типове са по-бавни от стойностните. Референтрни типове са: класове, масиви, символни низове, интерфейси и др.


Литерали - стойности на променливи, зададени директно в сорс кода
Видове литерали:
- boolean
- integer
- real
- character
- String
- The null literal

Escaping последователности ( \ ) - са литерали, които представят последователност от спец.символи, които задават символ, който по някаква причина не може да бъде изписан директно в сорс кода. Примери: (\',\",\\,\\n,\\t,\uXXXX)
Символът ( \ ) се нарича екраниращ символ




Глава 3. Оператори и изрази


Оператори - символи, които позволяват манипулиране на примитивни типове данни.


Категории оператори:
1. Аритметични    ( -, +, *, /, %, ++, --)
2. Логически      (&&,  ||,  !,  ^)
3. Побитови       (& , |, ^, ~, << , >>, >>>)
4. За сравнение   (== , !=, >, <, >=, <=)
5. За присвояване (=, +=, -=, *=, /=, %=, &=, |=, ^=, <<=, >>=, >>>=)
6. Съединяване на символни низове  ( + )
7. За Работа с типове ( (type), instanceof )
8. Други          ( ., new, (), [], ?: )


Оператори според броя аргументи(операнди):
- Едноаргументни (unary)
- Двуаргументни (binary) - всички двуаргументни са ляво асоцирани(изразите се изпълняват от ляво на дясно) с изкличение на опер. за назначаване на стойност. Всички оператори за присвояване на стойност и условния оператор (:?) са дясно асоцирани.
- Триаргументни (ternary) 


Логически оператори - приемат булеви стойности и връщат булев резултат.
-(x ^ y) изключващо или. За да върне true - трябва само x или само y да е true


Закони да Де Морган 
1. !(а && b) == (!a || !b) - Първи закон - отрицанието на конюнкцията(логическо и) на две числа е равна на дизюнкцията(логическо или) на техните отрицания.
2. !(a || b) == (!a && !b) - Втори закон - отрицанието на дизюнкцията (логическо или) на две съждения е равна на конюнкцията на техните отрицания.


Конкатенацията(слепването на два низа) на стрингове е бавна операция, трябва да се използва внимателно. Препоръчва се използването на StringBuilder/StringBuffer


Побитови оператори - действат над двоично представяне на числовите типове. В компютрите всички данни са представени в като поредица от 0-ли и 1-ци. За целта се използва двоичната бройна система. Нули и единици в електрониката могат да се реализират чрез логически схеми, в които 0 е "няма ток" или с напрежение "-5V", а 1-цата като "има ток" или "+5V". Побитовите оператори много приличат на логическите, но действат върху различни типове променливи. Логическите работят на стойностите true/false(булеви), а побитовите над числови стойности и се прилагат поботово - 0 и 1(битове). Символите са същите, но единични. Има разлика само при побитово отрицание(~x) и логическо отрицание (!x).
<</>>/>>> - побитово преместване ляво/дясно 0000 0110 << 1 == 0000 1100. Побитовото преместване може да се представи като умножение(преместване вляво) или деление(преместване в дясно) на променливата по/на числото 2.


Оператори за сравнение:
- по-голямо (>)
- по-малко  (<)
- по-голямо или равно (>=)
- по-малко или равно  (<=)
- оператор за равенство (==)
- различие (!=)
Всичко оператори за ставнение са двуаргументрни, а върнатият резултат е булев.


Оператори за присвояване (=)
- операнд1 = литерал или операнд2


Каскадно присвояване 
{ int x,y,z;
  x = y = z = 25;}


Комбинирани оператори за присвояване ( x += y e същото като x = x + y )
-операнд1 оператор = операнд2 === операнд1 = операнд1 оператор операнд2


Условен оператор (операнд1 ? операнд2 : операнд3) - Ако операнд1 има стойност true, се пресмята и връща като резултат операнд2, ако е falce - операнд3.


Други оператори 
- Оператор за достъп "." се използва за достъп до член на променливите на обект
- Квадратни скоби [ ] се използват за достъп до елементите на масива
- Скоби()използват за предефиниране приоритета на изпълнение на изрази/оператори 
- Оператора за пеобразуване на типове (type) се използва за преобразуване на променлива от един съвместим тип в друг.
- Оператора new се използва за създаването и инициализирането на нови обекти
- Опрратора instanceof се използва за проверка дали даден обект е съвместин с даден тип.


Преобразуване на типовете (скрито или изрично преобразуване)
За да извършим операция върху променливи от два различни типа данни ни се налага да преобразуваме двата типа към един и същ.  

Скритото/неявното (implicit) преобразуване на типове е възможно единствено, когато няма възможност от загуба на данни при преобразуването, т.е. когато конвертираме от тип с по-малък обхват към тип с по-голям (intкъм long).
Преобразуването става автоматично от компилатора, когато присвояваме стойност от по-малък обхват в променлива с по-голям обхват или когато в израза има типове с различен обхват. Тогава преобразуването става към типа с по-голям обхват.

Възможни неявни преобразувания:

1. byte  към short, int, long, float или double.
2. short към int, long, float или double.
3. char  към int, long, float или double.
4. int   към long, float или double.
5. long  към float или double.
6. float към double.

Преобразуване от типове с по-малък обхват към типове с по-голям няма загуба на данни. Изключение правят int към float(и двата 32бит, int ползва всичките си битове за числа, а float използва част за плаващата запетая) и long към double.


Изрично (explicit) преобразуване на типове. 
Изричното преобразуване е нужно, когато има опасност от загуба на данни.
double myDouble става:
long myLong = (long)myDouble; //Тук вече myDouble е в тип long;


Възможни изрични(явни) преобразувания:
1. short към byte или char 
2. char  към byte или short
3. int   към byte, short или char
4. long  към byte, short, char или int
5. float към byte, short, char, int или long
6. double към byte, short, char, int, long или float


Преобразуване към символен низ(String)
Става автоматично, когато използваме оператора за конкатенация и string.
- "Sum=" + (5+7)  получава се "Sum=12"
- x.toString() или Integer.toString(12). 



Глава 4. Вход и изход от конзолата.


Подробно за конзолите
Конзолата нараичана още "Command Prompt" или "Shell" или "команден интерпретатор" е програма на ОС, която осигурява достъп до системни команди и голям набор от програми, които са част от ОС или доп. инсталирани. Взаимодействието с нея става чрез въвеждане на текс от стандартния вход(най-често клавиатура) или извеждането на текст на стандартния изход(най-често монитор). Тези операции са известни като входно - изходни. Думата "Shell" значи обвивка и носи смисъла на обвивка между потребителя и вътрешността на ОС(ядрото)
Т.нар обвивки се разделят на 2 основни групи според това какъв интерфейс имат:
1. Команден интерфейс(CLI  Command Line Interface) - конзола за команди
2. Графичен интерфейс(GUI  Graphical User Interface) - граф. среда за разработка


Основни конзолни команди под Windows
- dir               - показва съдържанието на текущата директория
- cd <dir name>     - променя текущата директория
- mkdir <dir name>  - създава нова директория в текущата
- rmdir <file name> - изтрива съществуваща директория
- type <file name>  - визуализира съдържанието на директорията
- copy <src file> <destination file> - Копира един файл в друг


Стандартен вход и стандартен изход:
- System.in  /  System.out  /  System.err

System.print() / System.println() / System.printf("\n" или "%n")

Конкатенация на string - Когато string участва в конкатенация с какъвто и да е друг тип, крайният резултат винаги е стринг.

Форматиран изход с printf("%.", string, int, double) - Print Formated
- започва със спец символ %, който завада начало на форматиращ спецификатор
- argument_index - "$1"/"$2"
Стойности на форматния спецификатор(най-често използваните):

- %b - Булева стойност 
- %о - Осмична стойност
- %x - Шестнадесетична стойност
- %c - Знаков тип (char)
- %s - Стринг/String
- %S - Стринг/String, форматиран с главни букви
- %f - Число с плаваща запетая (float, double)
- %e - Число с плаваща запетая (с голяма точност)
- %h - Хеш кода на аргумента в шестнадесетичен вид
- %n - Нов ред, еквивалент е на "\n"
- %t - Префикс за конвертиране на към дата. Тази конверсия се използва само в комбинация с някоя от долните опции(пр. $tH,$tM,$tS)
	System.out.printf("%1$tH:%1$tM:%1$tS", new Date())
	  => 13:54:36
	System.out.printf("%1$td/%1$tm/%1$tY", new Date())
	  => 09/08/2008
	System.out.printf("%1$tA%1$tI:%1$tM%1$tp %1$tB/%1$tY", new Date())
	  => Събота 05:08pm Август/2008

Флагове(flags) - поредица от символи, които модифицират изходния код
- %- - резултата ще бъде ляво ориентиран
	- "%-10.3f, Math.PI" =>  "3.142"
- %+ - резултата винаги ще включва знак (+,-)
	- "%+,8f", Math.PI  => "+3.141593"
- %0 - резултата ще се отмести с нули
	- "%08d", 123 => "00000123"
- %( - резултата ще затвори в скоби отрицателните числа
	- "%(d", -123 => "(123)"

Форматиращи низове и локализация
В зависимост от настройките на локализация в ОС.
Locale:en_US   =>  1234.56(точка)    Saturday 05:24pm November-2008.  (PM)
Locale: bg_BG  =>  1234,56(запетая)  Събота 17:24 Ноември-2008.       (24H)

System.in.read()
System.in.read() взема 7bit ASCII код(UTF8-модерния) от главата на клавишния буфер(който събира до 16 ASCII) и изтрива този код от буфера. 7bit ASCII се конвертира до int(32bit) от метода System.in.read(), тези 7bita се допълват с 25 празни, за да се получи 32bit int. Ако има char, той се преобразува до 16bit.  


Класът Scanner 
Този клас е въведен от Java 5.0 насам, за да улесни четенето на тескст и числови данни отконзолата, както и от файлове.
- .nextLine() - за четене на цял символен низ, връща string
- .nextInt()/.nexLong() - за четене на целочислени типове
- .nextFloat()/.nextDouble - за четене на числа с плаваща запетая
- .hasNext***() - проверява дали съществува съответния тип(long,float...) 
Всеки от тези методи може да хвърли:
- IllegalStateException - ако Scanner класа вече е затворен с "scanner.close()"
Всеки от методите .hasNext***() може да хвърли:
- NoSuchElementException - ако входния поток свърши, но търс. елемент го няма



Глава 5. Условни конструкции


Оператори за сравнение - винаги дава булев резултат
( == ; != ; > ; >= ; < ; <= )


При сравнение на символи,сравнява тяхната лексикографска подредба(Unicode номер)


При използване на оператора за сравнение(==) със String, той не сравнява съдържанието на обектите, а само дали се намирант на едно и също място в паметта.За променливи стринг/обект не са приложими (<,>,<=,>=)


Логически оператори ( && , || , ! , ^ , | , &)
- Съкратен логически оператор И &&, пресмята операнд1 и ако НЕ Е true, не губи време да пресмята операнд2 и връща false.
- Съкратен логически оператор ИЛИ || , пресмята операнд1 и ако Е true, не губи време да пресмята оеранд2 и връща true.
- Несъкратени логически оператори (& , | , ^ ) - пресмятат и двата операнда, независимо, че резултата е ясен.
- Изключващо ИЛИ ^ ксор, връща true, когато само единият оператор е true, а другият задължително е false

Побитови операции върху цели числа - сравняват 2 променливи бит по бит.
- & върнатият бит е вдигнат/1 когато и двата сравнявани бита са 1
- | върнатият бит е вдигнат/1 когато единият/двата сравнявани бита са 1
- ^ върнатият бит е вдигнат/1 когато само единият бит е равен на 1






