var array = [3,5,6,79]

array.length - дължината на масив

string.substring(start, end) - реже стринг
string.split("").reverse().join("") - обръщане на стринг.
string.split("").sort().join("") - подрежда стринга по глемина(цифри)/ ред (букви)
string.replace("p","m") - замена само първат "p" с "m"
string.replace(/blue/g, "red") - заменя точно първата дума с втората. g-за глобално - вскички съвпадения. Може да е gi, за да заменя думата, дори да е с главна буква.
string.repeat(count) - повратя този стринг


x.toUpperCase - глвавни букви 
x.toLowerCase - малки буки

array.push("x") - добавя стойност в края на масива
array.join("x") - определя текста за залепяне на масива
array.pop ("x") - премахва стойност от края и я връща

var array = [ {object1}, {Object2}, ... ]
var anObject = {x:..., y: ...}
delete anObject

"left" in anObject - връща булева, която показва дали
този обект има това свойство.
 
for (var event in map) - спец. цикъл за преминаване 
през свойствата на даден обект.

array.un/shift() - добавя/премахва елементи в края на масив

array.indexOf/lastindexOf() - търси даденият елемен от началото или от края на масива

array.slice(2,5) - връща елементите между 2(включително)

и 5(изключвщо) в нов масив.


array1.concat(array2, array3 ...) - обединява масивите.


array.trim() -премахва празното пространство (интервали, нови редове, раздели и др. подобни характери) от началото и края на string-a


arguments.length - връща броят на аргументити на дадена функция

Math 
Math.random - произволно избрано число между 0 и 1;
Math.floor - произволни цели числа от 0 до 9 (math.floor(Math.random() * 10)) 

JSON.parse - преобразува данни от и към този формат
JSON.stringify - 

array.forEach(function(element, index, array) {}) - метода преминава през всеки елемент от масива във възходящ ред като изпълнява callback функция за всеки от тях - element,index,array

filter(array, test {}) - изгражда нов масив, само с елементи, които покриват теста
array.filter(test/function() {})

map(array, transform {}) - трансформира масив чрез прилагане на функция върху всички свои елементи и изгражда нов масив от върнатите стойности. Дължината му е същата като на стария масив, но елементите са вече mapped.

reduce(array, combine, start) - сгъване на масива в един елемент

speak.apply(fatRabbit, ["Burp!"]);
- The fat rabbit says 'Burp!'

  object.prototype
function.prototype
   array.prototype

for (var name in map) {
  if (map.hasOwnProperty(name)) {
    // ... this is an own property
  }

(new RTextCell("A") instanceof RTextCell);
//  true
бинарен оператор за инстанция.

"use strict"; -  минава в строг режим.

throw new Error("Invalid direction: " + result);

try {console.log("you see" , look()); 
   catch(error){
      consol.log("Something went wrong: " + error)}
   }
Почиставне след try/catch - изпълнява try и след това задължително finally.
finally {
    context = oldContext;
  }

Въвеждане на регулярен израз:
var re1 = new RegExp("abc");
var re2 = /abc/;
var eighteenPlus = /eighteen\+/ - по-добре да се сложи \ пред всяко НЕ -цифра/буква/празно пространсвто;

/abc/.test("abcde") ще върне true;

/[0-9]/ === /\d/ - оказване на диапазон

Общи групи от характери - команди за бърз достъп
\d 	Всеки характер цифра
\w 	Всеки буквено-цифров характер (‘дума характер’)
\s 	Всеки характер за празно пространство (space, tab, newline и similar)
\D 	Всеки характер, който не е цифра
\W 	Всеки не буквено-цифров характер
\S 	Всеки характер който не е за празно пространство
. 	Всеки характер, освен характера за нов ред

[^01] = notBinary = true

/^\d+$/ - Ксор съвпада с началото на входния стринг, а $ с края. 
/^!/    - съвпада с всеки стринг, който започва с удивителен знак
/x^/    - НЕ съвпада с всеки стринг, който има x в началото

/\bcat/ - стринг започващ с cat
/cat\b/ - стринг завършващ с cat 

\d+ - + позволява моделът да се повтори повече пъти.
\d* - * позволява моделът да се повтори 0 или 1 пъти.
/neighbou?r/ - ? прави част от един модел по избор (в случая "u")

/\d{4}/   - да се случи точно 4 пъти;
/\d{1,2}/ - да се случи от 1 до 2 пъти;
/\d{,5}/  - да се сличи от 0 до 5 пъти;
/\d{5,}/  - да се случи най-малко 5 пъти;
 
/boo+(hoo+)+/i - i в края, позволява да съвпада с главна B във входящия стринг.

/\d+/.exec()        - връща null или целият обект на съвпадение.
/\d+/.exec().index  - връща първият индекс, на който е открит обекта 
 string.match/\d+/  - което се държи като /\d+/.exec()
/(\d)+/.exec("123") - връща 2 съвпадения - ["123","3"], когато е в ( )

Date()
new Date() - текущата час и дата.
new Date().getTime() или Date.now() - връща настоящото време в милисекунди
new Date(2009, 11, 9) - създава обекта за период. 11м е Декември.Датите - 1 е първи.
.getFullYear()/.getMonth()/.getDay()/.getHours()/.getMinutes()/.getSeconds

/\b\d+ (pig|cow|chicken)s?\b/ - трябва да започва с цифра, да е последвано от pig|cow|chicken, може да накрая, може и да нямат.

string.replace(/([\w ]+), ([\w ]+)/g, "$2 $1") - превръща от стринг(иванов, иван) в нов (иван иванов) без запетая. $1 - отговаря за групата в първите скоби. 
$& - отговаря на цялото съвпадение.
string.replace(/...../, function() ) - възможно е функция да 2 ри аргумент

string.search(/\d/) - намира първата позоция, на която е намерена цифра. Подобно на string.indexOf("x",5), но при него може да се посочи от къде да започне търсенето с втори аргимент

Цикъл на съвпадения
var string= "string"; var number = /\b(\d+)\b/g; var match;
while (match = number.exec(string))
  console.log("Found", match[1], "at", match.index) - Found 3at14, Found 42at33...
string.match(/\w+/g) - връща масив със всички съвпадения в стринг
if (match = string.match(...)) - подобен на while(match = string.match())

greedy (ненаситни)/nongreed (не лакоми)
(+, *, ?, и {}) - операторите за повторение са greedy
(+?, *?, ??, {}?) - стават nongreed - съотвертстват на възможно най-малко повторения

/abc/ 	   Поредица от характери
/[abc]/	   Всеки характер от набора с характери
/[^abc]/   Всеки характер, който не е в набора от характери
/[0-9]/    Всеки характер в диапазона от характери
/x+/ 	   Едно или повече съответствия на модела x
/x+?/ 	   Едно или повече съответствия, nongreedy
/x*/ 	   Нула или повече съответствия
/x?/ 	   Нула или едно съответствие
/x{2,4}/   Между две и четири съответствия
/(abc)/    Група
/a|b|c/    Всеки един от няколко модела
/\d/ 	   Всяка цифра характер
/\w/ 	   Един буквено-цифров характер (“дума характер”)
/\s/ 	   Всеки интервал характер
/./ 	   Всеки характер, с изключение на характера за нов ред
/\b/ 	   Дума граница/маркер за граница
/^/ 	   Начало на вход
/$/ 	   Край на вход
/[^]/      Всеки характер


Модули

Namespace function

(function(){ return function(){...}; }) ();
увиваме, за да не замърсяват глобалната среда.
Могат да се използат и за др. неща/

eval(code) - изпълнява код даден като стринг. 
За интерпретиране на данни е по-добре е да се ползва конструктора
var plusOne = new Function("n", "return n + 1")




